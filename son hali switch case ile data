#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct Node {
    int data;
    struct Node* next;
};

typedef struct Node Node;

// Öğrenci veri yapısı
struct Student {
    int studentNumber;
    char name[50];
    int age;
};

typedef struct Student Student;

Node* createNode(int data) {
    Node* newNode = (Node*)malloc(sizeof(Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

Node* prepend(Node* head, int data) {
    Node* newNode = createNode(data);
    newNode->next = head;
    return newNode;
}

Node* append(Node* head, int data) {
    Node* newNode = createNode(data);
    if (head == NULL) {
        return newNode;
    }
    Node* current = head;
    while (current->next != NULL) {
        current = current->next;
    }
    current->next = newNode;
    return head;
}

void printList(Node* head) {
    Node* current = head;
    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }
    printf("NULL\n");
}

int searchStudentByName(Student students[], int n, const char *name) {
    for (int i = 0; i < n; i++) {
        if (strcmp(students[i].name, name) == 0) {
            return i; // İsim bulundu, dizideki dizini döndür
        }
    }
    return -1; // İsim bulunamadı
}

void deleteStudentByName(Student students[], int *n, const char *name) {
    int index = searchStudentByName(students, *n, name);
    if (index != -1) {
        for (int i = index; i < *n - 1; i++) {
            students[i] = students[i + 1];
        }
        (*n)--;
    }
}

int findLongestName(Student students[], int n, char *longestName) {
    if (n == 0) {
        return 0;
    }

    int maxLen = strlen(students[0].name);
    strcpy(longestName, students[0].name);

    for (int i = 1; i < n; i++) {
        int currentLen = strlen(students[i].name);
        if (currentLen > maxLen) {
            maxLen = currentLen;
            strcpy(longestName, students[i].name);
        }
    }

    return maxLen;
}

void shuffleStudents(Student students[], int n) {
    for (int i = n - 1; i > 0; i--) {
        int j = rand() % (i + 1);
        Student temp = students[i];
        students[i] = students[j];
        students[j] = temp;
    }
}

int main() {
    int choice;
    int n = 3; // Öğrenci sayısı
    Student students[n];
    Node* head = NULL;

    printf("Menü:\n");
    printf("1. Öğrenci Ekle\n");
    printf("2. Öğrenci Sil\n");
    printf("3. En Uzun İsmi Bul\n");
    printf("4. Liste Karıştır\n");
    printf("5. Liste Elemanlarını Göster\n");
    printf("0. Çıkış\n");

    while (1) {
        printf("Seçiminizi yapın: ");
        scanf("%d", &choice);

        switch (choice) {
            case 0:
                printf("Programdan çıkılıyor.\n");
                return 0;
            case 1:
                // Öğrenci ekleme kodu
                // Öğrenci numarası, adı ve yaşını kullanıcıdan alabilirsiniz
                break;
            case 2:
                // Öğrenci silme kodu
                // Öğrencinin adını kullanıcıdan alabilir ve deleteStudentByName fonksiyonunu çağırabilirsiniz
                break;
            case 3:
                // En uzun ismi bulma kodu
                // findLongestName fonksiyonunu kullanabilirsiniz
                break;
            case 4:
                // Liste karıştırma kodu
                // shuffleStudents fonksiyonunu kullanabilirsiniz
                break;
            case 5:
                // Liste elemanlarını gösterme kodu
                // printList fonksiyonunu kullanabilirsiniz
                break;
            default:
                printf("Geçersiz seçenek. Lütfen tekrar deneyin.\n");
                break;
        }
    }

    return 0;
}
